#+title: Miscellaneous utilities
#+auto_tangle:y
#+PROPERTY: header-args :tangle main.js

Contains miscellaneous utility functions too small to justify making their own files.

* Imports
#+begin_src js
import * as Utils from 'resource:///com/github/Aylur/ags/utils.js';
import cairo from 'cairo';
import icons from '../../config/icons.js';
import Gdk from 'gi://Gdk';
#+end_src

- =cairo= is a 2D graphics library widely used in GNOME.
- =gdk= stands fro Graphical Drawing Kit, which is a part of GTK that is used to create GUIs.

* Range
Returns an array of integers spanning the given length from the given starting point (defaults to 1).

#+begin_src js
/**
  * @param {number} length
  * @param {number} start
  * @returns {Array<number>}
  */
export function range(length, start = 1) {
    return Array.from({ length }, (_, i) => i + start);
}
#+end_src

* Substitute
#+begin_src js
/**
  * @param {Array<[string, string] | string[]>} collection
  * @param {string} item
  * @returns {string}
  */
export function substitute(collection, item) {
    return collection.find(([from]) => from === item)?.[1] || item;
}
#+end_src

** Parameters
- =collection= is an array of arrays, each inner array is expected to have two string elements.
- =item= is a string that will be checked against the first element of each inner array in =collection=.

** Process
The =find= method is used to find an array in =collections= where the first element (=from=) matches the parameter =item=.

- If such an array is found, return the second element from that array.
- If such an array is /not/ found, return the =item= string itself.

* Spawn a widget for each monitor
A utility function that takes in a widget and spawns it in each monitor that is present.

#+begin_src js
/**
 ,* @param {(monitor: number) => any} widget
 ,* @returns {Array<import('types/widgets/window').default>}
 ,*/
export function forMonitors(widget) {
  const n = Gdk.Display.get_default()?.get_n_monitors() || 1;
  return range(n, 0).map(widget).flat(1);
}
#+end_src

** Parameters
=widget= represents a function that maps an integer, which represents a monitor number, and returns an AGS widget for that monitor. This is the standard practice for making AGS widgets, as per the [[https://github.com/Aylur/ags/wiki/configuration][documentation]] itself.

* Create surface from widget
This function creates a Cairo graphics surface from a GTK widget.

#+begin_src js
/**
 ,* @param {import('gi://Gtk').Gtk.Widget} widget
 ,* @returns {any} - missing cairo type
 ,*/
export function createSurfaceFromWidget(widget) {
  const alloc = widget.get_allocation();
  const surface = new cairo.ImageSurface(
    cairo.Format.ARGB32,
    alloc.width,
    alloc.height,
  );
  const cr = new cairo.Context(surface);
  cr.setSourceRGBA(255, 255, 255, 0);
  cr.rectangle(0, 0, alloc.width, alloc.height);
  cr.fill();
  widget.draw(cr);

  return surface;
}
#+end_src

** Parameters
=widget= is an instance of a GTK widget. Note that this differs from the =widget= used in =forMonitors=.

** Process
1. =const alloc = widget.get_allocation()= is used to retrieve the allocation of the widget, including the size and position within its parent container.
2. =const surface = new cairo.ImageSurface(cairo.Format.ARGB32, alloc.width, alloc.height)= creates a new Cairo image surface, which is a drawing surface that stores its contents as a bitmap in memory.
   a. =ARGB32= indicates that the surface will store each pixel as 32 bits with alpha, red, green, and blue channel. This allows for transparency and a full range of colours.
3. =const cr = new cairo.Context(surface)= means that =cr= is a Cairo context for the image surface represented by =surface=. This is used for drawing operations.
4. =cr.setSourceRGBA(255, 255, 255, 0)= sets the drawing colour to white with full transparency.
5. =cr.rectangle(0, 0, alloc.width, alloc.height)= draws a rectangle over the entire surface.
6. =cr.fill()= fills the rectangle with the current drawing colour, which is white and fully transparent.
7. =widget.draw(cr)= draws the widget onto the Cairo context, effectively rendering the widget's appearance onto the surface.

In summary, this function takes in a GTK widget and renders it onto a Cairo image surface.


* Get audio type icon
Returns the icon corresponding to the current audio output device type.

#+begin_src js
/** @param {string} icon */
export function getAudioTypeIcon(icon) {
    const substitues = [
        ['audio-headset-bluetooth', icons.audio.type.headset],
        ['audio-card-analog-usb', icons.audio.type.speaker],
        ['audio-card-analog-pci', icons.audio.type.card],
    ];

    return substitute(substitues, icon);
}
#+end_src

* Launch app
Launches an app with =hyprctl=. *Note that this means the function only works in Hyprland.* Adjust as necessary for other window managers.

#+begin_src js
/** @param {import('types/service/applications').Application} app */
export function launchApp(app) {
    Utils.execAsync(['hyprctl', 'dispatch', 'exec', `sh -c ${app.executable}`]);
    app.frequency += 1;
}
#+end_src

* Check for dependencies
#+begin_src js
/** @param {Array<string>} bins */
export function dependencies(bins) {
    const deps = bins.map(bin => {
        const has = Utils.exec(`which ${bin}`);
        if (!has)
            print(`missing dependency: ${bin}`);

        return !!has;
    });

    return deps.every(has => has);
}
#+end_src

* Source
- [[https://github.com/Aylur/dotfiles/blob/main/ags/js/utils.js][Aylur's util.js]]
