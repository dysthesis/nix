#+title: Font icon
#+PROPERTY: header-args :noweb yes
#+auto_tangle:y

* Imports
#+begin_src js :tangle main.js
import Gtk from 'gi://Gtk';
import AgsLabel from 'resource:///com/github/Aylur/ags/widgets/label.js';
import GObject from 'gi://GObject';
#+end_src

* Class
#+begin_src js :tangle main.js
class FontIcon extends AgsLabel {
  static { GObject.registerClass(this); }
  <<constructor>>
  <<label>>
  <<get-size>>
  <<get-preferred-height-and-width>>
}
#+end_src

** Constructor
#+name: constructor
#+begin_src js
/** @param {string | import('types/widgets/label').Props & { icon?: string }} params */
constructor(params = '') {
  const { icon = '', ...rest } = params;
  super(typeof params === 'string' ? {} : rest);
  this.toggleClassName('font-icon');

  if (typeof params === 'object')
    this.icon = icon;

  if (typeof params === 'string')
    this.icon = params;
}
#+end_src

** Get and set label
#+name:label
#+begin_src js
get icon() { return this.label; }
set icon(icon) { this.label = icon; }
#+end_src

** Get size
#+name:get-size
#+begin_src js
get size() {
  return this.get_style_context()
             .get_property('font-size', Gtk.StateFlags.NORMAL);
}
#+end_src

** Get preferred height and width
#+name:get-preferred-height-width
#+begin_src js
/** @returns {[number, number]} */
vfunc_get_preferred_height() {
  return [this.size, this.size];
}

/** @returns {[number, number]} */
vfunc_get_preferred_width() {
  return [this.size, this.size];
}
#+end_src

* Export
Export a new instance of =FontIcon=.

#+begin_src js :tangle main.js
/** @param {string | import('types/widgets/label').Props & { icon?: string }} params */
export default params => new FontIcon(params);
#+end_src
