#+title: Configurations for AGS
#+auto_tangle:y

* Options
The entire file consists of a single exported object, which defines the options for this AGS configurations. Therefore, anything short of entirely reconstructing the widgets themselves should be achievable by modifying this object.

** Workspaces
The number of workspaces to enable.
#+name:workspaces
#+begin_src js
workspaces: 10,
#+end_src

** Fonts
#+name:fonts
#+begin_src js
font: {
  font: "JetBrainsMono Nerd Font",
  mono: "JetBrainsMono Nerd Font",
  size: 14pt,
},
#+end_src

** Colour
#+name:colour
#+begin_src js
colour: {
  red: "#ff5555",
  green: "#5af78e",
  yellow: "#f3f99d",
  blue: "#57c7ff",
  magenta: "#ff6ac1",
  teal: "#9aedfe",
  orange: "#fabe2c",
  foreground: "#ffffff",
  background: "#000000",
  accent: "#9aedfe",
},
#+end_src

** GTK
#+name:gtk
#+begin_src js
gtk: {
  theme: "Graphite-Dark",
  icon-theme: "Tela-black-dark",
},
#+end_src

** Bar
#+name:bar
#+begin_src js
bar: {
  position: 'bottom',
  icon: '',
  separators: true,
},
#+end_src

** Notifications
#+name:notifications
#+begin_src js
notifications: {
  black_list: [
    'Spotify'
  ],
  position: 'bottom',
  width: 450,
},
#+end_src

** Substitutions
#+name:substitutions
#+begin_src js :noweb yes
substitutions: {
    <<substitutions-icons>>
    <<substitutions-titles>>
},
#+end_src

*** Icons
#+name:substitutions-icons
#+begin_src js :noweb yes
icons: [
  ['transmission-gtk', 'transmission'],
  ['blueberry.py', 'bluetooth'],
  ['Caprine', 'facebook-messenger'],
  ['', 'preferences-desktop-display'],
],
#+end_src

*** Titles
#+name:substitutions-titles
#+begin_src js :noweb yes
titles: [
  ['com.github.Aylur.ags', 'AGS'],
  ['transmission-gtk', 'Transmission'],
  ['com.obsproject.Studio', 'OBS'],
  ['com.usebottles.bottles', 'Bottles'],
  ['com.github.wwmm.easyeffects', 'Easy Effects'],
  ['org.gnome.TextEditor', 'Text Editor'],
  ['org.gnome.design.IconLibrary', 'Icon Library'],
  ['blueberry.py', 'Blueberry'],
  ['org.wezfurlong.wezterm', 'Wezterm'],
  ['com.raggesilver.BlackBox', 'BlackBox'],
  ['firefox', 'Firefox'],
  ['org.gnome.Nautilus', 'Files'],
  ['libreoffice-writer', 'Writer'],
  ['', 'Desktop'],
],
#+end_src

** Export
#+begin_src js :noweb yes :tangle options.js
export default {
    <<workspaces>>
    <<bar>>
    <<gtk>>
    <<fonts>>
    <<colour>>
    <<substitutions>>
    <<notifications>>
}
#+end_src

** Commentary
Both [[https://github.com/Aylur/dotfiles/blob/main/ags/js/options.js][Aylur]] and [[https://github.com/RoccoRakete/hyprland-dots/blob/66a268840bac41aadf36f222f0faa2c28caf62d0/ags/js/options.js][RoccoRakete]] approaches this by using an object of a custom class =Opt= and a dedicated widget for settings. The advantage of such an approach is clear: it is very user friendly. However, it comes at the cost of increased complexity.

Since this configuration is intended for my personal use, and I do not require such features, this configuration will not include such mechanisms, instead opting for a simple, plain object containing the necessary configuration data. Any changes can be made by editing this document, which is a literate configuration.

If increased user-friendliness is desired, consider visiting Aylur's and/or RoccoRakete's dotfiles that were previously mentioned.


* Icons
:PROPERTIES:
:header-args:js: :tangle icons.js
:END:

#+begin_src js
export default {
    lock: 'system-lock-screen-symbolic',
    audio: {
        mic: {
            muted: 'microphone-disabled-symbolic',
            low: 'microphone-sensitivity-low-symbolic',
            medium: 'microphone-sensitivity-medium-symbolic',
            high: 'microphone-sensitivity-high-symbolic',
        },
        volume: {
            muted: 'audio-volume-muted-symbolic',
            low: 'audio-volume-low-symbolic',
            medium: 'audio-volume-medium-symbolic',
            high: 'audio-volume-high-symbolic',
            overamplified: 'audio-volume-overamplified-symbolic',
        },
        type: {
            headset: 'audio-headphones-symbolic',
            speaker: 'audio-speakers-symbolic',
            card: 'audio-card-symbolic',
        },
        mixer: '',
    },
    apps: {
        apps: 'view-app-grid-symbolic',
        search: 'folder-saved-search-symbolic',
    },
    battery: {
        charging: '󱐋',
        warning: 'battery-empty-symbolic',
    },
    bluetooth: {
        enabled: 'bluetooth-active-symbolic',
        disabled: 'bluetooth-disabled-symbolic',
    },
    brightness: {
        indicator: 'display-brightness-symbolic',
        keyboard: 'keyboard-brightness-symbolic',
        screen: 'display-brightness-symbolic',
    },
    powermenu: {
        sleep: 'weather-clear-night-symbolic',
        reboot: 'system-reboot-symbolic',
        logout: 'system-log-out-symbolic',
        shutdown: 'system-shutdown-symbolic',
    },
    recorder: {
        recording: 'media-record-symbolic',
    },
    notifications: {
        noisy: 'preferences-system-notifications-symbolic',
        silent: 'notifications-disabled-symbolic',
    },
    trash: {
        full: 'user-trash-full-symbolic',
        empty: 'user-trash-symbolic',
    },
    mpris: {
        fallback: 'audio-x-generic-symbolic',
        shuffle: {
            enabled: '󰒟',
            disabled: '󰒟',
        },
        loop: {
            none: '󰓦',
            track: '󰓦',
            playlist: '󰑐',
        },
        playing: '󰏦',
        paused: '󰐍',
        stopped: '󰐍',
        prev: '󰒮',
        next: '󰒭',
    },
    ui: {
        close: 'window-close-symbolic',
        info: 'info-symbolic',
        menu: 'open-menu-symbolic',
        link: 'external-link-symbolic',
        settings: 'emblem-system-symbolic',
        tick: 'object-select-symbolic',
        arrow: {
            right: 'pan-end-symbolic',
            left: 'pan-start-symbolic',
            down: 'pan-down-symbolic',
            up: 'pan-up-symbolic',
        },
    },
    system: {
        cpu: 'org.gnome.SystemMonitor-symbolic',
        ram: 'drive-harddisk-solidstate-symbolic',
        temp: 'temperature-symbolic',
    },
    dialog: {
        Search: ' ',
        Applauncher: '󰵆 ',
        Bar: ' ',
        Border: '󰃇 ',
        Color: '󰏘 ',
        Desktop: '  ',
        Font: ' ',
        General: '󰒓 ',
        Misc: '󰠱 ',
        Theme: '󰃟 ',
        Notifications: '󰂚 ',
    },
};
#+end_src

* Variables
:PROPERTIES:
:header-args:js: :tangle variables.js
:END:

** Imports
#+begin_src js
import Variable from 'resource:///com/github/Aylur/ags/variable.js';
import GLib from 'gi://GLib';
import options from './options.js';
#+end_src

** Helper functions
#+begin_src js
/** @type {function([string, string] | string[]): number} */
const divide = ([total, free]) => Number.parseInt(free) / Number.parseInt(total);
#+end_src

** Interval
#+begin_src js
const intval = options.systemFetchInterval;
#+end_src

** Uptime
Indicates how long the system have been active for.

#+begin_src js
export const uptime = Variable('', {
    poll: [60_000, 'cat /proc/uptime', line => {
        const uptime = Number.parseInt(line.split('.')[0]) / 60;
        if (uptime > 18 * 60)
            return 'Go Sleep';

        const h = Math.floor(uptime / 60);
        const s = Math.floor(uptime % 60);
        return `${h}:${s < 10 ? '0' + s : s}`;
    }],
});
#+end_src

** Distro
#+begin_src js
export const distro = GLib.get_os_info('ID');
#+end_src

** Distro icon
#+begin_src js
export const distroIcon = (() => {
    switch (distro) {
        case 'fedora': return '';
        case 'arch': return '';
        case 'nixos': return '';
        case 'debian': return '';
        case 'opensuse-tumbleweed': return '';
        case 'ubuntu': return '';
        case 'endeavouros': return '';
        default: return '';
    }
})();
#+end_src

** CPU
#+begin_src js
export const cpu = Variable(0, {
    poll: [intval, 'top -b -n 1', out => divide(['100', out.split('\n')
        .find(line => line.includes('Cpu(s)'))
        ?.split(/\s+/)[1]
        .replace(',', '.') || '0'])],
});
#+end_src

** RAM
#+begin_src js
export const ram = Variable(0, {
    poll: [intval, 'free', out => divide(out.split('\n')
        .find(line => line.includes('Mem:'))
        ?.split(/\s+/)
        .splice(1, 2) || ['1', '1'])],
});
#+end_src

** CPU temperature
#+begin_src js
export const temp = Variable(0, {
    poll: [intval, 'cat ' + options.temperature, n => {
        return Number.parseInt(n) / 100_000;
    }],
});
#+end_src

* Themes
This could be something to add in the future, but I'm not one to switch themes much and prefer to stick to one, so for now, this will be here as a placeholder.
